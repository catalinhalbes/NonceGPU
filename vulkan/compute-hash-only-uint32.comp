#version 450
#include "common.h"

layout(local_size_x = GPU_THREADS_PER_BLOCK, local_size_y = 1, local_size_z = 1) in;

#define SCHEDULE(i)  \
	temp = schedule[(i-3)&0xF] ^ schedule[(i-8)&0xF] ^ schedule[(i-14)&0xF] ^ schedule[(i-16)&0xF];  \
	schedule[i & 0xF] = temp << 1 | temp >> 31;

#define ROUND0a(a,b,c,d,e,i)  \
	schedule[i] = (block[i] << 24) | ((block[i] & 0xFF00) << 8) | ((block[i] >> 8) & 0xFF00) | (block[i] >> 24);  \
	ROUNDTAIL(a, b, e, ((b & c) | (~b & d)), i, 0x5A827999)

#define ROUND0b(a,b,c,d,e,i)  \
	SCHEDULE(i)  \
	ROUNDTAIL(a, b, e, ((b & c) | (~b & d)), i, 0x5A827999)

#define ROUND1(a,b,c,d,e,i)  \
	SCHEDULE(i)  \
	ROUNDTAIL(a, b, e, (b ^ c ^ d), i, 0x6ED9EBA1)

#define ROUND2(a,b,c,d,e,i)  \
	SCHEDULE(i)  \
	ROUNDTAIL(a, b, e, ((b & c) ^ (b & d) ^ (c & d)), i, 0x8F1BBCDC)

#define ROUND3(a,b,c,d,e,i)  \
	SCHEDULE(i)  \
	ROUNDTAIL(a, b, e, (b ^ c ^ d), i, 0xCA62C1D6)

#define ROUNDTAIL(a,b,e,f,i,k)  \
	e += (a << 5 | a >> 27) + f + k + schedule[i & 0xF];  \
	b = b << 30 | b >> 2;

void sha1_compress(inout uint state[5], const in uint block[18]) {
	uint a = state[0];
	uint b = state[1];
	uint c = state[2];
	uint d = state[3];
	uint e = state[4];
	
	uint schedule[16];
	uint temp;
	ROUND0a(a, b, c, d, e,  0)
	ROUND0a(e, a, b, c, d,  1)
	ROUND0a(d, e, a, b, c,  2)
	ROUND0a(c, d, e, a, b,  3)
	ROUND0a(b, c, d, e, a,  4)
	ROUND0a(a, b, c, d, e,  5)
	ROUND0a(e, a, b, c, d,  6)
	ROUND0a(d, e, a, b, c,  7)
	ROUND0a(c, d, e, a, b,  8)
	ROUND0a(b, c, d, e, a,  9)
	ROUND0a(a, b, c, d, e, 10)
	ROUND0a(e, a, b, c, d, 11)
	ROUND0a(d, e, a, b, c, 12)
	ROUND0a(c, d, e, a, b, 13)
	ROUND0a(b, c, d, e, a, 14)
	ROUND0a(a, b, c, d, e, 15)
	ROUND0b(e, a, b, c, d, 16)
	ROUND0b(d, e, a, b, c, 17)
	ROUND0b(c, d, e, a, b, 18)
	ROUND0b(b, c, d, e, a, 19)
	ROUND1(a, b, c, d, e, 20)
	ROUND1(e, a, b, c, d, 21)
	ROUND1(d, e, a, b, c, 22)
	ROUND1(c, d, e, a, b, 23)
	ROUND1(b, c, d, e, a, 24)
	ROUND1(a, b, c, d, e, 25)
	ROUND1(e, a, b, c, d, 26)
	ROUND1(d, e, a, b, c, 27)
	ROUND1(c, d, e, a, b, 28)
	ROUND1(b, c, d, e, a, 29)
	ROUND1(a, b, c, d, e, 30)
	ROUND1(e, a, b, c, d, 31)
	ROUND1(d, e, a, b, c, 32)
	ROUND1(c, d, e, a, b, 33)
	ROUND1(b, c, d, e, a, 34)
	ROUND1(a, b, c, d, e, 35)
	ROUND1(e, a, b, c, d, 36)
	ROUND1(d, e, a, b, c, 37)
	ROUND1(c, d, e, a, b, 38)
	ROUND1(b, c, d, e, a, 39)
	ROUND2(a, b, c, d, e, 40)
	ROUND2(e, a, b, c, d, 41)
	ROUND2(d, e, a, b, c, 42)
	ROUND2(c, d, e, a, b, 43)
	ROUND2(b, c, d, e, a, 44)
	ROUND2(a, b, c, d, e, 45)
	ROUND2(e, a, b, c, d, 46)
	ROUND2(d, e, a, b, c, 47)
	ROUND2(c, d, e, a, b, 48)
	ROUND2(b, c, d, e, a, 49)
	ROUND2(a, b, c, d, e, 50)
	ROUND2(e, a, b, c, d, 51)
	ROUND2(d, e, a, b, c, 52)
	ROUND2(c, d, e, a, b, 53)
	ROUND2(b, c, d, e, a, 54)
	ROUND2(a, b, c, d, e, 55)
	ROUND2(e, a, b, c, d, 56)
	ROUND2(d, e, a, b, c, 57)
	ROUND2(c, d, e, a, b, 58)
	ROUND2(b, c, d, e, a, 59)
	ROUND3(a, b, c, d, e, 60)
	ROUND3(e, a, b, c, d, 61)
	ROUND3(d, e, a, b, c, 62)
	ROUND3(c, d, e, a, b, 63)
	ROUND3(b, c, d, e, a, 64)
	ROUND3(a, b, c, d, e, 65)
	ROUND3(e, a, b, c, d, 66)
	ROUND3(d, e, a, b, c, 67)
	ROUND3(c, d, e, a, b, 68)
	ROUND3(b, c, d, e, a, 69)
	ROUND3(a, b, c, d, e, 70)
	ROUND3(e, a, b, c, d, 71)
	ROUND3(d, e, a, b, c, 72)
	ROUND3(c, d, e, a, b, 73)
	ROUND3(b, c, d, e, a, 74)
	ROUND3(a, b, c, d, e, 75)
	ROUND3(e, a, b, c, d, 76)
	ROUND3(d, e, a, b, c, 77)
	ROUND3(c, d, e, a, b, 78)
	ROUND3(b, c, d, e, a, 79)
	
	state[0] += a;
	state[1] += b;
	state[2] += c;
	state[3] += d;
	state[4] += e;
}

// Input and output buffers
// layout( push_constant ) uniform Constants {
// 	readonly uint zeroBytes;		// the number of NULL bytes the final hash should have at the beginning
// 	readonly uint nonceLen;			// the size in bytes of the nonce (SHOULD BE <= 8), if the length of the nonce is greater than 4, the surplus will be found in extraNonce
// 	readonly uint threadOffset;		// the offset to be added to tid
// 	readonly uint extraNonce;		// extra bytes do be appended to the nonce
// };

layout(set = 0, binding = 0) readonly buffer InputBuffer {
    readonly uint len;				// the original lenght of the data in bytes
    readonly uint inputHash[5];		// the partial digest
	readonly uint message[16];		// the remainder of the message
	readonly uint zeroBytes;		// the number of NULL bytes the final hash should have at the beginning
	readonly uint nonceLen;			// the size in bytes of the nonce (SHOULD BE <= 8), if the length of the nonce is greater than 4, the surplus will be found in extraNonce
	readonly uint threadOffset;		// the offset to be added to tid
	readonly uint extraNonce;		// extra bytes do be appended to the nonce
};

layout(set = 0, binding = 1) writeonly buffer OutputBuffer {
	uint found;	// bool, nonzero if a valid nonce 
    uint nonce;	// the id of the thread that found the nonce
};

void main() {
    // Get the global invocation ID
    uint tid = gl_GlobalInvocationID.x + threadOffset;

	uint hash[5];
	hash[0] = inputHash[0];
    hash[1] = inputHash[1];
    hash[2] = inputHash[2];
    hash[3] = inputHash[3];
    hash[4] = inputHash[4];
    
	// just to avoid some conditional execution make the buffer larger 
	// all threads will hash a message of equal length, meaning that tey will follow the same conditional path
	// but the code was becoming way too complex to handle :D
	uint block[18] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

    uint rem                 = (len % 64) >> 2;
	uint remBytes            = len % 4;
    uint remBits             = remBytes << 3;
	uint remBits32Complement = 32 - remBits;
    
	// copy the bytes from the message (should pe padded with 0s so it's safe to copy more)
    for (uint j = 0; j < rem; j++) {
        block[j] = message[j];
    }

	if (remBytes > 0) {
		block[rem    ] = (message[rem] & (0xffffffffu >> remBits32Complement))                         | ((tid        & (0xffffffffu >> remBits)) << remBits);
		block[rem + 1] = ((tid         & (0xffffffffu << remBits32Complement)) >> remBits32Complement) | ((extraNonce & (0xffffffffu >> remBits)) << remBits);
		block[rem + 2] = ((extraNonce  & (0xffffffffu << remBits32Complement)) >> remBits32Complement);
	} 
	else {
		block[rem    ] = tid;
		block[rem + 1] = extraNonce;
	}

	//if (rem == 14 && (remBytes + nonceLen) >= 8) {
	//	// the buffer is completely full
	//	sha1_compress(hash, block);
	//
	//	for (uint j = 0; j < 16; j++) {
	//		block[j] = 0;
	//	}
	//		
	//	block[0] = block[16];
	//	block[1] = block[17];
	//	rem = 0;
	//}
	//if (rem == 15 && (remBytes + nonceLen) >= 4) {
	//	// the buffer is completely full
	//	sha1_compress(hash, block);
	//
	//	for (uint j = 0; j < 16; j++) {
	//		block[j] = 0;
	//	}
	//		
	//	block[0] = block[16];
	//	block[1] = block[17];
	//	rem = (remBytes + nonceLen) / 4 - 1;
	//}
	
	if (rem >= 14 && (remBytes + nonceLen) >= ((16 - rem) * 4)) {
		// the buffer is completely full
		sha1_compress(hash, block);

		for (uint j = 0; j < 16; j++) {
			block[j] = 0;
		}
		
		block[0] = block[16];
		block[1] = block[17];
		rem = (remBytes + nonceLen) / 4 - 16 + rem;
	}
	else {
		// the buffer is not full continue normally
		rem += (remBytes + nonceLen) / 4;
	}

	remBytes            = (remBytes + nonceLen) % 4;
	remBits             = remBytes << 3;
	remBits32Complement = 32 - remBits;

	// add the last 0x80
	if (remBytes > 0) {
		block[rem] = (block[rem] & (0xffffffffu >> remBits32Complement)) | (0x80 << remBits);
	}
	else {
		block[rem] = 0x80;
	}

	block[rem + 1] = 0;
	block[rem + 2] = 0;

	if (rem >= 14) {
		sha1_compress(hash, block);
        for (uint j = 0; j < 14; j++) {
            block[j] = 0;
        }
	}

	uint bitLen = (len + nonceLen) << 3; // let's hope the file isn't greater than 512MB
	bitLen = REVERSE_32(bitLen);
	block[14] = 0;
    block[15] = bitLen;
    
    sha1_compress(hash, block);

	// remember that the bytes are in big endian order, you need to check from the most significant to the least significant
	uint i, ok = 1;
	rem = zeroBytes / 4;
	for (i = 0; i < rem; i++) {
		if (hash[i] != 0) {
			ok = 0;
			break;
		}
	}

	if ((hash[i] & (0xffffffffu << ((4 - zeroBytes % 4) << 3))) != 0) {
		ok = 0;
	}

	if (ok > 0) {
		found = 1;
		nonce = tid;
	}
}
